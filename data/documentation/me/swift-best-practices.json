{"metadata":{"role":"article","modules":[{"name":"Stefan's Development Hub"}],"title":"Swift Best Practices","roleHeading":"Article"},"sections":[],"hierarchy":{"paths":[["doc:\/\/Me\/documentation\/Me","doc:\/\/Me\/documentation\/Me\/Development"]]},"abstract":[{"text":"Here you can find coding guidelines which are battle tested over years.","type":"text"}],"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Partially these coding guidelines are borrowed from popular ones like:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/Lickability\/swift-best-practices","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/linkedin\/swift-style-guide","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"etc.","type":"text"}]}]}]},{"text":"Xcode Settings","type":"heading","level":2,"anchor":"Xcode-Settings"},{"text":"Editor","type":"heading","level":4,"anchor":"Editor"},{"inlineContent":[{"type":"text","text":"Be sure to have the values below set in "},{"type":"codeVoice","code":"Xcode"},{"type":"text","text":" > "},{"type":"codeVoice","code":"Settings"},{"type":"text","text":" > "},{"type":"codeVoice","code":"TextEditing"}],"type":"paragraph"},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Display","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Editing","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Indentation"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/github.com\/Blackjacx\/Development\/assets\/794372\/e2505341-ccf5-4010-87cf-7c5bc4144a7b"}]}],[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/github.com\/Blackjacx\/Development\/assets\/794372\/7aaf932d-b77b-4f6b-a097-aade72f1dfea"}]}],[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/github.com\/Blackjacx\/Development\/assets\/794372\/65f1acc3-dd1c-4c3b-8349-ba2db1748e67"}]}]]],"header":"row"},{"text":"Spell Checking","type":"heading","level":4,"anchor":"Spell-Checking"},{"inlineContent":[{"text":"Enable spell checking under ","type":"text"},{"code":"Edit","type":"codeVoice"},{"text":" > ","type":"text"},{"code":"Format","type":"codeVoice"},{"text":" > ","type":"text"},{"code":"Spelling and Grammar","type":"codeVoice"},{"text":" > ","type":"text"},{"code":"Check Spelling While Typing","type":"codeVoice"},{"text":". We use en-UK","type":"text"},{"text":" ","type":"text"},{"text":"as default language.","type":"text"}],"type":"paragraph"},{"text":"Misc","type":"heading","level":2,"anchor":"Misc"},{"text":"Avoid Code Duplications","type":"heading","level":4,"anchor":"Avoid-Code-Duplications"},{"inlineContent":[{"text":"This way you avoid limitless growing codebase plus, more important, you avoid fixing issues in multiple places. This is one of the most important rules.","type":"text"}],"type":"paragraph"},{"text":"Don’t use the default case if it’s possible that the enum is extended in the future","type":"heading","level":4,"anchor":"Dont-use-the-default-case-if-its-possible-that-the-enum-is-extended-in-the-future"},{"inlineContent":[{"type":"text","text":"Switch is an extremely useful construct in Swift since the compiler warns about missing cases. If you use the default case you disable this behavior and loose one of the most powerful features of Swift. It makes sense however to use the default case if you don’t want case-specific behavior for every case, but only for one or some of them. In this case it doesn’t break anything if new cases get added. Also if you switch over plain value types, a default case is harmless."}],"type":"paragraph"},{"text":"Never omit specifying the value of string-typed enum cases","type":"heading","level":4,"anchor":"Never-omit-specifying-the-value-of-string-typed-enum-cases"},{"inlineContent":[{"text":"Imagine you create a string-typed enum and omit the values for every case since Swift infers the value from the case name. Now when you refactor one enum case from somewhere in your app, the inferred value also changes, which is not desired i.e. in JSON keys. You would introduce hard to find errors.","type":"text"}],"type":"paragraph"},{"text":"Don’t use .none in as enum case","type":"heading","level":4,"anchor":"Dont-use-none-in-as-enum-case"},{"inlineContent":[{"text":"Your own implementation could easily be confused with ","type":"text"},{"type":"codeVoice","code":"Optional.none"},{"text":" when your enum typed property is optional. To avoid this think about an alternative name for this case.","type":"text"}],"type":"paragraph"},{"text":"Avoid subclasses where possible and finalize your classes","type":"heading","level":4,"anchor":"Avoid-subclasses-where-possible-and-finalize-your-classes"},{"inlineContent":[{"type":"text","text":"Because super- and subclass logic becomes hard to maintain, try to split up logic into separate structs or classes instead. By marking your classes final, some optimizations are enabled which among other things speeds up compilation. Remember that since structs are not inheritable, they are final by design."}],"type":"paragraph"},{"text":"Set thickness of lines device dependent","type":"heading","level":4,"anchor":"Set-thickness-of-lines-device-dependent"},{"inlineContent":[{"type":"text","text":"When you set the thickness of lines to "},{"code":"1.0 \/ UIScreen.main.scale","type":"codeVoice"},{"type":"text","text":" then the will appear equally on all devices."}],"type":"paragraph"},{"text":"Localized-strings used in a framework F must be defined there","type":"heading","level":4,"anchor":"Localized-strings-used-in-a-framework-F-must-be-defined-there"},{"inlineContent":[{"text":"If don’t follow this rule, ","type":"text"},{"inlineContent":[{"text":"F","type":"text"}],"type":"strong"},{"text":" depends on the target\/module where the string is defined and thus is not modular\/independent anymore. If e.g. another target\/module uses a class of ","type":"text"},{"inlineContent":[{"type":"text","text":"F"}],"type":"strong"},{"text":" that contains a localized string which is outside of ","type":"text"},{"inlineContent":[{"type":"text","text":"F"}],"type":"strong"},{"text":" the translation could not be found.","type":"text"}],"type":"paragraph"},{"text":"Name selectors with the pattern on<action_name>","type":"heading","level":4,"anchor":"Name-selectors-with-the-pattern-on<actionname>"},{"inlineContent":[{"text":"Having a unified pattern for naming selectors helps to make code understandable faster. The on* pattern is also used in other programming languages like JavaScript.","type":"text"}],"type":"paragraph"},{"text":"Avoid multiple statements in one line \/ long lines","type":"heading","level":4,"anchor":"Avoid-multiple-statements-in-one-line--long-lines"},{"inlineContent":[{"text":"They are harder to read. They are harder to understand. They are even not visible when you work in multiple editor windows side by side - or even worse break to the next line. They could be misunderstood by new developers as an indicator to use it everywhere which will greatly degrade the codebase.","type":"text"}],"type":"paragraph"},{"text":"Use typealiases instead of primitive types when appropriate","type":"heading","level":4,"anchor":"Use-typealiases-instead-of-primitive-types-when-appropriate"},{"inlineContent":[{"text":"For example when you have to declare a property in a specific unit like ","type":"text"},{"type":"codeVoice","code":"timeInSeconds"},{"text":" you usually call it ","type":"text"},{"type":"codeVoice","code":"time"},{"text":" and use the type ","type":"text"},{"type":"codeVoice","code":"TimeInterval"},{"text":" which is nothing more than a typalias. Use them to create an implicit context and keep property names swiftily short. Remember: They also appear in code completion and give you a hint about the property that you cannot infer from a short name like in ","type":"text"},{"type":"codeVoice","code":"getWeight() -> Kilograms"},{"text":". The latter example is a much better declaration than ","type":"text"},{"type":"codeVoice","code":"getWeight() -> Double"},{"text":". Read more about that in ","type":"text"},{"identifier":"https:\/\/www.swiftbysundell.com\/posts\/the-power-of-type-aliases-in-swift","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Use Camel Case for acronyms like URL or HTML","type":"heading","level":4,"anchor":"Use-Camel-Case-for-acronyms-like-URL-or-HTML"},{"inlineContent":[{"text":"For names like ","type":"text"},{"code":"isHtmlValid","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"isUrlComplete","type":"codeVoice"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/medium.com\/better-programming\/string-case-styles-camel-pascal-snake-and-kebab-case-981407998841"},{"text":" improves readability of function and variable names (though it is different than Apple does it). Also see ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/www.hackingwithswift.com\/swift\/3.0\/lower-camel-case"},{"text":" article.","type":"text"}],"type":"paragraph"},{"text":"Colors","type":"heading","level":2,"anchor":"Colors"},{"text":"Use Semantic Colors","type":"heading","level":4,"anchor":"Use-Semantic-Colors"},{"inlineContent":[{"type":"text","text":"Use semantic colors instead of "},{"type":"codeVoice","code":"red"},{"type":"text","text":", "},{"type":"codeVoice","code":"blue"},{"type":"text","text":", etc. Semantic colors describe in which context they are used instead of which color they actually are. Good examples are "},{"type":"codeVoice","code":"backgroundColor"},{"type":"text","text":", "},{"type":"codeVoice","code":"buttonColor"},{"type":"text","text":", "},{"type":"codeVoice","code":"buttonHighlightColor"},{"type":"text","text":", "},{"type":"codeVoice","code":"labelColor"},{"type":"text","text":", etc. Using semantic colors enables the color to automatically adapt to changing OS settings like dark mode or high contrast mode."}],"type":"paragraph"},{"text":"Framework Extensions","type":"heading","level":2,"anchor":"Framework-Extensions"},{"text":"Never set translatesAutoresizingMaskIntoConstraints manually","type":"heading","level":4,"anchor":"Never-set-translatesAutoresizingMaskIntoConstraints-manually"},{"inlineContent":[{"text":"We have the functions ","type":"text"},{"code":"<subview>.addTo(<parent>)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"<subview>.addMaximizedTo(<parent>)","type":"codeVoice"},{"text":" which do that automatically.","type":"text"}],"type":"paragraph"},{"text":"UI Alerts","type":"heading","level":4,"anchor":"UI-Alerts"},{"inlineContent":[{"type":"text","text":"Use UIAlertController extension to display alerts and action sheets."}],"type":"paragraph"},{"text":"Fonts","type":"heading","level":4,"anchor":"Fonts"},{"inlineContent":[{"type":"text","text":"Never define a font in code, but rather use or extend the presets in the Fonts enum."}],"type":"paragraph"},{"text":"Colors","type":"heading","level":4,"anchor":"Colors"},{"inlineContent":[{"text":"Never define a color in code, but rather use or extend the Palette struct and the related UIColor extension.","type":"text"}],"type":"paragraph"},{"text":"Date Formatter","type":"heading","level":4,"anchor":"Date-Formatter"},{"inlineContent":[{"type":"text","text":"You don’t have to configure your own "},{"type":"codeVoice","code":"DateFormatter"},{"type":"text","text":" objects, use "},{"type":"codeVoice","code":"SHDateFormatter"},{"type":"text","text":" instead. If it doesn’t contain a date format you need, extend it in "},{"type":"codeVoice","code":"SHDateFormatter+Extensions"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Hiding UIStackView Subviews","type":"heading","level":4,"anchor":"Hiding-UIStackView-Subviews"},{"inlineContent":[{"text":"Use the ","type":"text"},{"code":"showArrangedSubview","type":"codeVoice"},{"text":" method in the ","type":"text"},{"code":"UIView+Extensions","type":"codeVoice"},{"text":" to show or hide arranged subviews.","type":"text"}],"type":"paragraph"},{"text":"Native Type Extensions","type":"heading","level":4,"anchor":"Native-Type-Extensions"},{"inlineContent":[{"type":"text","text":"Before implementing extensions on any build-in types, have a look in the "},{"code":"Extensions","type":"codeVoice"},{"type":"text","text":" framework. We already implemented a lot and most likely it is already there. The rule is when it has no app dependencies it goes to the "},{"code":"Extensions","type":"codeVoice"},{"type":"text","text":" framework otherwise it should be part of the app."}],"type":"paragraph"},{"text":"UIView • UIViewController Architecture","type":"heading","level":2,"anchor":"UIView--UIViewController-Architecture"},{"inlineContent":[{"type":"text","text":"These guidelines are intended for code-based view\/view controller creation without Interface Builder and teach you how to work Auto Layout programmatically."}],"type":"paragraph"},{"text":"Use special function to setup and add EACH subview","type":"heading","level":4,"anchor":"Use-special-function-to-setup-and-add-EACH-subview"},{"inlineContent":[{"type":"text","text":"Setup each subview of a view or view controller in its own function! The Name of the function has to be "},{"type":"codeVoice","code":"private func setup<property_name>"},{"type":"text","text":". This function should set all parameters necessary for the first setup. This includes "},{"type":"codeVoice","code":"contentHuggingPriority"},{"type":"text","text":" and "},{"type":"codeVoice","code":"contentCompressionResistancyPriority"},{"type":"text","text":". It is called only once in init (UIView) or viewDidLoad (UIViewController). Right before the function returns add the view to its superview. This pattern turned out to be one of the cleanest structuring methods possible for the swift language. The advantage is that you have a clean interface of properties on top of the class which helps to recognize all subviews at one glance - in contrast of setting up views in a property closure. Furthermore you can use "},{"type":"codeVoice","code":"self"},{"type":"text","text":" since these functions are called after initialization. You have a clear overview of the adding order of subviews. Additionally you prevent one long function that sets up all properties of all subviews - typically init or viewDidLoad. Last but not least if you stick to this pattern it is much easier to understand the structure of the whole app since you’ll find this pattern all over again."}],"type":"paragraph"},{"text":"Use special function to setup layout constraints","type":"heading","level":4,"anchor":"Use-special-function-to-setup-layout-constraints"},{"inlineContent":[{"type":"text","text":"Always use "},{"type":"codeVoice","code":"private func setupAutoLayout()"},{"type":"text","text":" to create constraints between all subviews! Call it right after the last "},{"type":"codeVoice","code":"private func setup*"},{"type":"text","text":" function in viewDidLoad (UIViewController) or init (UIView). This activates all layout constraints."}],"type":"paragraph"},{"text":"Configure view in viewDidLoad (or loadView)","type":"heading","level":4,"anchor":"Configure-view-in-viewDidLoad-or-loadView"},{"inlineContent":[{"type":"text","text":"Never access the view in the initializer of a UIViewController subclass. Accessing the view property causes forces it to be loaded. You should never force the view to be loaded in the initializer since this is done automatically when the view is added to the view hierarchy. By default the view should be created in "},{"code":"loadView()","type":"codeVoice"},{"type":"text","text":". Additional configurations are done in "},{"code":"viewDidLoad()","type":"codeVoice"},{"type":"text","text":". After the view has been loaded you can start making modifications to it like adding subviews, etc."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Sometimes we initialize VCs just to pass it around. Setting up the whole view hierarchy just blocks resources which we do not need at that moment."}],"type":"paragraph"},{"text":"Access Qualifier","type":"heading","level":2,"anchor":"Access-Qualifier"},{"text":"Declare symbols internal if you want to test them","type":"heading","level":4,"anchor":"Declare-symbols-internal-if-you-want-to-test-them"},{"inlineContent":[{"text":"To be able to use symbols in tests declare them as ","type":"text"},{"code":"internal","type":"codeVoice"},{"text":" (no prefix) instead of ","type":"text"},{"code":"private","type":"codeVoice"},{"text":" even if they are not used outside of the containing object. If you don’t need to test them and they are not required outside of the containing object declare it as ","type":"text"},{"code":"private","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Code Format","type":"heading","level":2,"anchor":"Code-Format"},{"text":"Use the self syntax exclusively in closures and appropriate initializers","type":"heading","level":4,"anchor":"Use-the-self-syntax-exclusively-in-closures-and-appropriate-initializers"},{"inlineContent":[{"type":"text","text":"So it will become easier to track down future retain cycles that are caused by missing "},{"code":"[weak self]","type":"codeVoice"},{"type":"text","text":" in the closure definition. Just leave out "},{"code":"self","type":"codeVoice"},{"type":"text","text":" if it is not necessary. Also use the "},{"code":"self.","type":"codeVoice"},{"type":"text","text":" syntax to initially assign constructor parameters to their respective properties if they have the same name."}],"type":"paragraph"},{"text":"Line Breaks","type":"heading","level":4,"anchor":"Line-Breaks"},{"inlineContent":[{"text":"Do not leave a blank line underneath a every function declaration. This results in more compact code blocks which can be perceived as ","type":"text"},{"inlineContent":[{"type":"text","text":"one"}],"type":"strong"},{"text":" block easier.","type":"text"}],"type":"paragraph"},{"text":"Comments","type":"heading","level":4,"anchor":"Comments"},{"inlineContent":[{"type":"text","text":"Comment functions and properties using "},{"type":"codeVoice","code":"\/\/\/"},{"type":"text","text":" only if it enhances their comprehensibility. Generally comment code snippets if you think it is reasonable. Sometimes design choices or complex structures are not immediately obvious to understand, in such cases comments are useful for others and your future self."}],"type":"paragraph"},{"text":"No file header","type":"heading","level":4,"anchor":"No-file-header"},{"inlineContent":[{"type":"text","text":"Remove comment header for newly created files since it will be always outdated (copyright, spelling errors in file names, etc.)."}],"type":"paragraph"},{"text":"Symbol Order","type":"heading","level":4,"anchor":"Symbol-Order"},{"inlineContent":[{"type":"text","text":"Place the nested types at the bottom of the class\/struct definition with a "},{"type":"codeVoice","code":"MARK: - Sub-Types"},{"type":"text","text":" above. Place protocol conformances above these nested types and mark them with their respective protocol name, e.g. "},{"type":"codeVoice","code":"MARK: - StatePresentable"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"All other symbols (properties, function, etc.) should be ordered by ascending privateness, so "},{"type":"codeVoice","code":"public"},{"type":"text","text":", "},{"type":"codeVoice","code":"internal"},{"type":"text","text":", "},{"type":"codeVoice","code":"private"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"code":"static","type":"codeVoice"},{"text":" symbols are always above ","type":"text"},{"code":"non-static","type":"codeVoice"},{"text":" ones.","type":"text"}],"type":"paragraph"},{"text":"Code Organization","type":"heading","level":4,"anchor":"Code-Organization"},{"inlineContent":[{"type":"text","text":"Do not use extensions for organizing\/modularizing your code! Instead use "},{"code":"\/\/ MARK: - <#title#>","type":"codeVoice"},{"type":"text","text":" statements to define section in your code."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The advantages of this and specifically moving all protocols in the main object definition are:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"the main class declaration shows all conformances of the class\/struct","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"clean method list ("},{"type":"codeVoice","code":"⌃+6"},{"type":"text","text":")"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"a unified file structure results in less searching for symbols, very similar to the "},{"type":"codeVoice","code":"func setup<view>()"},{"type":"text","text":" convention"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"See also the customizable SwiftLint rule ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/realm.github.io\/SwiftLint\/type_contents_order.html"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Name bools with the pattern isState","type":"heading","level":4,"anchor":"Name-bools-with-the-pattern-isState"},{"inlineContent":[{"text":"This is easy to read and matches the swifty naming conventions in modern iOS frameworks.","type":"text"}],"type":"paragraph"},{"text":"Line Length","type":"heading","level":4,"anchor":"Line-Length"},{"inlineContent":[{"type":"text","text":"Try to achieve a maximum line length of 80-120 characters. This has several reasons:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Some developers work with 2 parallel editors (2 editors, 1 editor \/ 1 canvas, 1 editor \/ 1 assistant \/ etc.) and maybe also the simulator side by side.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Horizontal scrolling is quite annoying"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Not every developer has a 4K monitor. Be inclusive!"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"During presentations the font size has to be increased which reduces the available space in the editor"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Many command line applications work with 120 or 80 columns"}]}]}]},{"inlineContent":[{"type":"text","text":"In all of the cases above the editor’s code should be fully readable "},{"inlineContent":[{"type":"text","text":"without"}],"type":"strong"},{"type":"text","text":" horizontal scrolling and there should be no need to constantly adjust the Xcode panels as this is pretty stressful."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Code that looks ugly with a line-length limit of 80-120 is a great indicator that refactoring is needed."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Please check out the SwiftLint rule "},{"type":"reference","isActive":true,"identifier":"https:\/\/realm.github.io\/SwiftLint\/line_length.html"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Avoid typealias for Nested structs","type":"heading","level":4,"anchor":"Avoid-typealias-for-Nested-structs"},{"inlineContent":[{"type":"text","text":"Typealiases have a bunch of advantages but for nested structs, this are the cons:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"code":"⌘","type":"codeVoice"},{"type":"text","text":"-clicking the typealias, Xcode will take you to the alias. What you want instead is navigate to the original object."}]}]},{"content":[{"inlineContent":[{"text":"Quick-Open (","type":"text"},{"type":"codeVoice","code":"⌘ + ⇧ + o"},{"text":") leads you to the typealias. You actually want the original object as suggestion. It also can happen that you end up with multiple suggestions of the same type in the quick-open dialog (one for the alias and one for the real object).","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When you add the same nested object under another parent struct, specifying the same aliases would be confusing. It could even lead to name-space conflicts, depending on where you declare them. In your codebase it hides the information which struct is actually meant."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"When you add a typealias for each nested struct, you would end up with tons of additional code on top of many files."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"For these reasons I advise against using typealiases for nested objects. If you use them because of line length issues, meanwhile there are nice formatting options in Xcode that streamline indentation (","type":"text"},{"code":"⌃ + m","type":"codeVoice"},{"text":" in combination with SwiftFormat works perfectly).","type":"text"}],"type":"paragraph"},{"text":"Xcode","type":"heading","level":2,"anchor":"Xcode"},{"text":"No White-Spaces In Group\/Folder Names","type":"heading","level":4,"anchor":"No-White-Spaces-In-GroupFolder-Names"},{"inlineContent":[{"type":"text","text":"Scripts do not like whitespaces. Since we have a lot of automation by scripts, please use "},{"type":"codeVoice","code":"_"},{"type":"text","text":" as replacement for them."}],"type":"paragraph"},{"text":"Accessibility","type":"heading","level":2,"anchor":"Accessibility"},{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/news\/?id=v56qu1b3"},{"type":"text","text":" by Apple is a good introduction and reference for how to use Voice Over."}],"type":"paragraph"},{"text":"Use the accessibilityId of a view to make it identifiable in Unit\/UI Tests or Voice Over announcements","type":"heading","level":4,"anchor":"Use-the-accessibilityId-of-a-view-to-make-it-identifiable-in-UnitUI-Tests-or-Voice-Over-announcements"},{"inlineContent":[{"type":"text","text":"The syntax for those identifiers should be "},{"type":"codeVoice","code":"aid.<view_controller>.<ui_element>"},{"type":"text","text":" or if further scoping is needed "},{"type":"codeVoice","code":"aid.<view_controller>.<parent_view>.<ui_element>"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Set the appropriate accessibility traits if not set automatically","type":"heading","level":4,"anchor":"Set-the-appropriate-accessibility-traits-if-not-set-automatically"},{"inlineContent":[{"type":"text","text":"While buttons usually have it implicitly set, labels functioning as e.g. headers need need their traits set to "},{"code":".header","type":"codeVoice"},{"type":"text","text":". The same applies for search fields. In cases were a UIView serves as a button, it’s trait should be set to "},{"code":".button","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Use post notifications to inform about screen\/layout changes","type":"heading","level":4,"anchor":"Use-post-notifications-to-inform-about-screenlayout-changes"},{"inlineContent":[{"text":"Use it always when a new screen\/popup\/alert is displayed and you want to draw the users attention to it. Use it sparsely in other situations since it interrupts messages spoken by Voice Over on user interaction. An alternative would be to manually refocus an element and re-read it’s label or hint, containing the new information.","type":"text"}],"type":"paragraph"},{"text":"Disable Voice Over for images","type":"heading","level":4,"anchor":"Disable-Voice-Over-for-images"},{"inlineContent":[{"text":"Blind people cannot see the image. If you enable Voice over here it should be a meaningful and short description of what the image shows.","type":"text"}],"type":"paragraph"},{"text":"Group elements to declutter the UI for Voice Over users","type":"heading","level":4,"anchor":"Group-elements-to-declutter-the-UI-for-Voice-Over-users"},{"inlineContent":[{"type":"text","text":"Focusable elements should be kept to the necessary minimum. For example, labels and controls that belong together should be grouped to one accessibility element. The element should have its label’s text for its a11y label and the control as its action. Compare the title + switch cells in the iOS Settings App."}],"type":"paragraph"},{"text":"Any colors should have a sufficient contrast","type":"heading","level":4,"anchor":"Any-colors-should-have-a-sufficient-contrast"},{"inlineContent":[{"text":"Use at least 4.5:1 for fonts <18pt and 3:1 for fonts >=18pt. You can also read in the official ","type":"text"},{"type":"reference","identifier":"https:\/\/www.w3.org\/TR\/WCAG20\/#visual-audio-contrast-contrast","isActive":true},{"text":" about this topic.","type":"text"}],"type":"paragraph"},{"text":"Any view that contains text should support Dynamic Type","type":"heading","level":4,"anchor":"Any-view-that-contains-text-should-support-Dynamic-Type"},{"inlineContent":[{"type":"text","text":"These views should adapt to different font sizes so the UI looks good when the user scales up\/down the font in the iOS settings. Support of the highest Dynamic Type setting is enough. "},{"type":"codeVoice","code":"Larger Accessibility Sizes"},{"type":"text","text":" are not required for now."}],"type":"paragraph"},{"text":"Testing","type":"heading","level":2,"anchor":"Testing"},{"text":"Extract testing code to helper functions","type":"heading","level":4,"anchor":"Extract-testing-code-to-helper-functions"},{"inlineContent":[{"type":"text","text":"Extract testing code to helper functions if you need to write the same testing code over and over again to test similar things. The problem here is that Xcode will report the failure in your helper function. This is easily fixable by writing your function like this: "},{"type":"codeVoice","code":"func verify(file: StaticString = #file, line: UInt = #line) { XCTAssertEqual(1, 3, file: file, line: line) }"},{"type":"text","text":"! The error message will jump to the call site of the extracted function."}],"type":"paragraph"},{"text":"Prefer XCTUnwrap over guard let","type":"heading","level":4,"anchor":"Prefer-XCTUnwrap-over-guard-let"},{"inlineContent":[{"text":"XCTUnwrap requires only 1 line instead of at least 3 for the guard. It makes tests much more readable. The error message is even better and most important ","type":"text"},{"type":"strong","inlineContent":[{"text":"standardized","type":"text"}]},{"text":": ","type":"text"},{"type":"codeVoice","code":"XCTUnwrap failed: expected non-nil value of type \"UIDatePicker\""},{"text":". No worries the ","type":"text"},{"type":"codeVoice","code":"it"},{"text":" closures of Quick will handle thrown errors correctly.","type":"text"}],"type":"paragraph"},{"text":"Git","type":"heading","level":2,"anchor":"Git"},{"text":"Conflicts on a branch have to be resolved by the author","type":"heading","level":4,"anchor":"Conflicts-on-a-branch-have-to-be-resolved-by-the-author"},{"inlineContent":[{"type":"text","text":"This is super important since only the author truly knows how to integrate the changes of a branch into the development branch. The author is responsible for the PR and after making the changes ready for review there should not be changes by anybody else because they can lead to issues which fall back to the author in the end. Instead ask the author to do the changes. If conflict resolution is especially difficult, work together with the developer who created the commit that triggers the conflict."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This basically happens during the review."}],"type":"paragraph"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/me\/swift-best-practices"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Me\/documentation\/Me\/Swift-Best-Practices"},"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"https://github.com/Blackjacx/Development/assets/794372/e2505341-ccf5-4010-87cf-7c5bc4144a7b":{"alt":"XcodeTextEditingDisplay","variants":[{"url":"https:\/\/github.com\/Blackjacx\/Development\/assets\/794372\/e2505341-ccf5-4010-87cf-7c5bc4144a7b","traits":["1x","light"]}],"type":"image","identifier":"https:\/\/github.com\/Blackjacx\/Development\/assets\/794372\/e2505341-ccf5-4010-87cf-7c5bc4144a7b"},"https://medium.com/better-programming/string-case-styles-camel-pascal-snake-and-kebab-case-981407998841":{"titleInlineContent":[{"type":"text","text":"Camel Case"}],"title":"Camel Case","url":"https:\/\/medium.com\/better-programming\/string-case-styles-camel-pascal-snake-and-kebab-case-981407998841","type":"link","identifier":"https:\/\/medium.com\/better-programming\/string-case-styles-camel-pascal-snake-and-kebab-case-981407998841"},"https://www.hackingwithswift.com/swift/3.0/lower-camel-case":{"titleInlineContent":[{"type":"text","text":"this"}],"title":"this","url":"https:\/\/www.hackingwithswift.com\/swift\/3.0\/lower-camel-case","type":"link","identifier":"https:\/\/www.hackingwithswift.com\/swift\/3.0\/lower-camel-case"},"doc://Me/documentation/Me":{"kind":"symbol","type":"topic","identifier":"doc:\/\/Me\/documentation\/Me","role":"collection","abstract":[{"text":"I’m Stefan and I’m glad you found the way to my personal development hub and","type":"text"},{"text":" ","type":"text"},{"text":"portfolio. I love to create open source software, especially development","type":"text"},{"text":" ","type":"text"},{"text":"tools, to help other developers to be more productive.","type":"text"}],"title":"Stefan's Development Hub","images":[{"type":"icon","identifier":"profile.jpg"}],"url":"\/documentation\/me"},"https://developer.apple.com/news/?id=v56qu1b3":{"titleInlineContent":[{"type":"text","text":"This article"}],"title":"This article","url":"https:\/\/developer.apple.com\/news\/?id=v56qu1b3","type":"link","identifier":"https:\/\/developer.apple.com\/news\/?id=v56qu1b3"},"projects.png":{"alt":"A technology icon representing mobile development.","variants":[{"url":"\/images\/projects@2x.png","traits":["2x","light"]}],"type":"image","identifier":"projects.png"},"profile.jpg":{"alt":"A picture of the author","variants":[{"url":"\/images\/profile@2x.jpg","traits":["2x","light"]}],"type":"image","identifier":"profile.jpg"},"https://realm.github.io/SwiftLint/type_contents_order.html":{"titleInlineContent":[{"type":"text","text":"type_contents_order"}],"title":"type_contents_order","url":"https:\/\/realm.github.io\/SwiftLint\/type_contents_order.html","type":"link","identifier":"https:\/\/realm.github.io\/SwiftLint\/type_contents_order.html"},"https://github.com/Blackjacx/Development/assets/794372/65f1acc3-dd1c-4c3b-8349-ba2db1748e67":{"alt":"XcodeTextEditingIndentation","variants":[{"url":"https:\/\/github.com\/Blackjacx\/Development\/assets\/794372\/65f1acc3-dd1c-4c3b-8349-ba2db1748e67","traits":["1x","light"]}],"type":"image","identifier":"https:\/\/github.com\/Blackjacx\/Development\/assets\/794372\/65f1acc3-dd1c-4c3b-8349-ba2db1748e67"},"https://github.com/linkedin/swift-style-guide":{"titleInlineContent":[{"type":"text","text":"LinkedIn"}],"title":"LinkedIn","url":"https:\/\/github.com\/linkedin\/swift-style-guide","type":"link","identifier":"https:\/\/github.com\/linkedin\/swift-style-guide"},"https://realm.github.io/SwiftLint/line_length.html":{"titleInlineContent":[{"type":"text","text":"line_length"}],"title":"line_length","url":"https:\/\/realm.github.io\/SwiftLint\/line_length.html","type":"link","identifier":"https:\/\/realm.github.io\/SwiftLint\/line_length.html"},"https://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast":{"titleInlineContent":[{"type":"text","text":"WCAG20 docs"}],"title":"WCAG20 docs","url":"https:\/\/www.w3.org\/TR\/WCAG20\/#visual-audio-contrast-contrast","type":"link","identifier":"https:\/\/www.w3.org\/TR\/WCAG20\/#visual-audio-contrast-contrast"},"doc://Me/documentation/Me/Development":{"url":"\/documentation\/me\/development","title":"Development","type":"topic","kind":"article","abstract":[{"text":"Swift best practices, review guidelines, interview questions, links and FAQ around (mobile) development.","type":"text"}],"images":[{"identifier":"projects.png","type":"card"}],"role":"collectionGroup","identifier":"doc:\/\/Me\/documentation\/Me\/Development"},"https://github.com/Lickability/swift-best-practices":{"titleInlineContent":[{"type":"text","text":"Lickability"}],"title":"Lickability","url":"https:\/\/github.com\/Lickability\/swift-best-practices","type":"link","identifier":"https:\/\/github.com\/Lickability\/swift-best-practices"},"https://github.com/Blackjacx/Development/assets/794372/7aaf932d-b77b-4f6b-a097-aade72f1dfea":{"alt":"XcodeTextEditingEditing","variants":[{"url":"https:\/\/github.com\/Blackjacx\/Development\/assets\/794372\/7aaf932d-b77b-4f6b-a097-aade72f1dfea","traits":["1x","light"]}],"type":"image","identifier":"https:\/\/github.com\/Blackjacx\/Development\/assets\/794372\/7aaf932d-b77b-4f6b-a097-aade72f1dfea"},"https://www.swiftbysundell.com/posts/the-power-of-type-aliases-in-swift":{"titleInlineContent":[{"type":"text","text":"Sundells Blog Article"}],"title":"Sundells Blog Article","url":"https:\/\/www.swiftbysundell.com\/posts\/the-power-of-type-aliases-in-swift","type":"link","identifier":"https:\/\/www.swiftbysundell.com\/posts\/the-power-of-type-aliases-in-swift"}}}